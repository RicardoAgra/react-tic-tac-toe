{"version":3,"sources":["Containers/header.js","Components/title.js","Components/square.js","Components/board.js","Containers/main.js","Containers/footer.js","App.js","serviceWorker.js","AI/board.tsx","AI/ai.js","Store/reducer.js","index.js"],"names":["StyledHeader","styled","header","_templateObject","Button","button","_templateObject2","Title","h3","_templateObject3","Header","_this$props","this","props","matchId","restartHandler","undoLastMoveHandler","react_default","a","createElement","className","onClick","React","PureComponent","connect","state","dispatch","type","StyledTitle","h1","title_templateObject","Object","objectSpread","memo","_ref","victory","nextAction","messages","tie","human","computer","next","humanSelect","message","square_templateObject","content","isLastMove","clickHandler","classList","push","square_Button","join","prevProps","nextProps","StyledBoard","article","board_templateObject","Board","window","setTimeout","computerMoveHandler","boardState","lastMove","humanMoveHandler","board","map","index","position","Components_square","key","bind","Component","squareIndex","value","StyledMain","main","main_templateObject","Main","console","log","selectSymbolHandler","Components_board","Components_title","humanChar","computerChar","StyledFooter","footer","footer_templateObject","P","p","footer_templateObject2","Link","footer_templateObject3","href","Section","section","App_templateObject","App","Containers_footer","Boolean","location","hostname","match","lines","doesCharWinLine","char","charArray","charCount","emptyCount","forEach","charEl","countCharWinningMoves","totalWinningMoves","line","doesCharWin","some","square","isWinner","every","hasChar","addMove","newBoard","toConsumableArray","DEFS","findFirstWinningMove","winningMove","find","indexOf","findOptimalNonWinningMove","findIndex","newBoardState","attackMove","newerBoardState","undefined","move","AI","setDefs","defs","moveCount","winningShapeMove","rand","Math","random","genRandomID","length","text","possible","i","charAt","floor","initialState","Array","fill","moveHistory","updateMoveHistory","nextMove","concat","checkVictory","reducer","arguments","action","nextBoard","computerMove","newMoveHistory","newLastMove","pop","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cded7fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst StyledHeader = styled.header`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 70px;\n  background: var(--primary);\n  width: 100%;\n  padding: 0 10px;\n`;\n\nconst Button = styled.button`\n  border: 2px solid currentColor;\n  background: transparent;\n  padding: 10px 20px;\n  font-weight: 600;\n  text-transform: uppercase;\n  cursor: pointer;\n  color: var(--secondary-light);\n\n  :hover {\n    background-color: var(--primary-dark);\n  }\n`;\n\nconst Title = styled.h3`\n  color: white;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n`;\n\nclass Header extends React.PureComponent {\n  render() {\n    const { matchId, restartHandler, undoLastMoveHandler } = this.props;\n\n    return (\n      <StyledHeader>\n        <Button className=\"button\" onClick={restartHandler}>\n          Restart\n        </Button>\n        <Title>Match Id: {matchId}</Title>\n        <Button className=\"button\" onClick={undoLastMoveHandler}>\n          Undo last move\n        </Button>\n      </StyledHeader>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    matchId: state.matchId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    restartHandler: () => dispatch({ type: \"RESTART\" }),\n    undoLastMoveHandler: () => dispatch({ type: \"UNDO_LAST_MOVE\" })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst StyledTitle = styled.h1`\n  margin-bottom: 50px;\n`;\n\nconst title = ({ victory, nextAction }) => {\n  const messages = {\n    victory: {\n      tie: \"Tie!\",\n      human: \"Human wins!\",\n      computer: \"Computer wins!\"\n    },\n    next: {\n      humanSelect: \"Select your symbol\",\n      human: \"Turn to move: Human\",\n      computer: \"Turn to move: Computer\"\n    }\n  };\n  let message = \"\";\n\n  if (victory) {\n    message = messages.victory[victory];\n  } else {\n    message = messages.next[nextAction];\n  }\n\n  return <StyledTitle>{message}</StyledTitle>;\n};\n\nconst mapStateToProps = state => {\n  return {\n    ...state\n  };\n};\n\nexport default connect(mapStateToProps)(React.memo(title));\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  width: 100px;\n  height: 100px;\n  background: transparent;\n  font-size: 50px;\n  cursor: pointer;\n\n  svg {\n    display: none;\n  }\n\n  &.times .fa-times {\n    display: inline;\n  }\n  &.circle .fa-circle {\n    display: inline;\n  }\n  &.previous-move {\n    background: var(--primary);\n    color: var(--secondary-light);\n  }\n`;\n\nconst square = ({ content, isLastMove, clickHandler }) => {\n  var classList = [\"square\"];\n  if (isLastMove) {\n    classList.push(\"previous-move\");\n  }\n  if (content === \"x\") {\n    classList.push(\"times\");\n  }\n  if (content === \"o\") {\n    classList.push(\"circle\");\n  }\n\n  return (\n    <Button className={classList.join(\" \")} onClick={clickHandler}>\n      <i className=\"fas fa-times \" />\n      <i className=\"far fa-circle\" />\n    </Button>\n  );\n};\n\nexport default React.memo(square, (prevProps, nextProps) => prevProps.content === nextProps.content && prevProps.isLastMove === nextProps.isLastMove);\n","import React from \"react\";\nimport Square from \"./square\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst StyledBoard = styled.article`\n  width: 300px;\n  height: 300px;\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nclass Board extends React.Component {\n  componentWillMount() {\n    if (this.props.nextAction === \"computer\") {\n      window.setTimeout(this.props.computerMoveHandler, 0);\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.boardState !== this.props.boardState) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentWillUpdate(nextProps) {\n    if (nextProps.nextAction === \"computer\") {\n      window.setTimeout(this.props.computerMoveHandler, 0);\n    }\n  }\n\n  render() {\n    const { boardState, lastMove, humanMoveHandler } = this.props;\n\n    var board = boardState.map((state, index) => {\n      let isLastMove = lastMove.position === index;\n      return (\n        <Square\n          key={index}\n          content={state}\n          isLastMove={isLastMove}\n          clickHandler={humanMoveHandler.bind(null, index)}\n        />\n      );\n    });\n\n    return <StyledBoard className=\"Board\">{board}</StyledBoard>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ...state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    humanMoveHandler: squareIndex =>\n      dispatch({ type: \"HUMAN_MOVE\", value: squareIndex }),\n    computerMoveHandler: () => dispatch({ type: \"COMPUTER_MOVE\" })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Board);\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Title from \"../Components/title\";\nimport Square from \"../Components/square\";\nimport Board from \"../Components/board\";\n\nconst StyledMain = styled.main`\n  margin: 100px;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n`;\n\nclass Main extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return (nextProps.nextAction === \"humanSelect\" || this.props.nextAction === \"humanSelect\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"Main updated!\");\n  }\n\n  render() {\n    const { nextAction, selectSymbolHandler } = this.props;\n    var content = null;\n\n    if (nextAction === \"humanSelect\") {\n      content = (\n        <div>\n          <Square\n            content=\"x\"\n            clickHandler={selectSymbolHandler.bind(null, \"x\", \"o\")}\n          />\n          <Square\n            content=\"o\"\n            clickHandler={selectSymbolHandler.bind(null, \"o\", \"x\")}\n          />\n        </div>\n      );\n    } else {\n      content = <Board />;\n    }\n\n    return (\n      <StyledMain>\n        <Title />\n        {content}\n      </StyledMain>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectSymbolHandler: (humanChar, computerChar) =>\n      dispatch({\n        type: \"SELECT_SYMBOL\",\n        value: { human: humanChar, computer: computerChar }\n      })\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    nextAction: state.nextAction\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Main);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledFooter = styled.footer`\n  background-color: #333;\n  color: white;\n  padding: 10px;\n  font-size: 14px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: \"Ubuntu\", \"Arial\", sans-serif;\n`;\n\nconst P = styled.p`\n  width: 50%;\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n\n  svg {\n    width: 20px;\n    margin: 0 5px;\n  }\n\n  &.first {\n    justify-content: flex-end;\n  }\n`;\n\nconst Link = styled.a`\n  margin-left: 4px;\n`;\n\nconst footer = () => {\n  return (\n    <StyledFooter>\n      <P className=\"first\">\n        <a href=\"https://github.com/RicardoAgra\">\n          <i className=\"fab fa-github\" />\n        </a>{\" \"}\n        Made by Ricardo Agra,{\" \"}\n      </P>\n      <P>\n        <i className=\"fab fa-react\" />\n        Powered by{\" \"}\n        <Link className=\"react-link\" href=\"https://reactjs.org/\">\n          {\" \"}\n          React\n        </Link>\n        .\n      </P>\n    </StyledFooter>\n  );\n};\n\nexport default footer;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Header from './Containers/header';\nimport Main from './Containers/main';\nimport Footer from './Containers/footer';\n\nconst Section = styled.section`\n  text-align: center;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-between;\n  flex-flow: column;\n  background: var( --background );\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <Section className=\"App\">\n        <Header></Header>\n        <Main></Main>\n        <Footer></Footer>\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const lines: number[][] = [\n  [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n  [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n  [0, 4, 8], [2, 4, 6]             // Diagonals\n]\n\nconst addMove = (boardState: string[], char: string, index: number): string[] => {\n  var newBoard = [...boardState];\n  newBoard[index] = char;\n\n  return newBoard;\n}\n\nconst isWinner = (boardState: string[], char: string): boolean => {\n  let some = lines.some(line => {\n    let aux = line.every(index => boardState[index] === char)\n    return aux;\n  });\n\n  return some;\n}\n\nconst hasChar = (boardState: string[], char: string): boolean => {\n  return boardState.some(square => square === char);\n}\n\nconst doesCharWinLine = (char: string, charArray: string[]): boolean => {\n  let charCount = 0;\n  let emptyCount = 0;\n\n  charArray.forEach(charEl => {\n    if (charEl === char) { charCount += 1; }\n    if (charEl === \"\") { emptyCount += 1; }\n  });\n\n  return (emptyCount === 1 && charCount === 2);\n}\n\nconst countCharWinningMoves = (boardState: string[], char: string): number => {\n  let totalWinningMoves = 0;\n\n  lines.forEach(line => {\n    let charArray = line.map(index => boardState[index]);\n\n    totalWinningMoves += doesCharWinLine(char, charArray) ? 1 : 0;\n  });\n\n  return totalWinningMoves;\n}\n\nconst doesCharWin = (boardState: string[], char: string): boolean => {\n  return boardState.some(square => {\n    return (square !== \"\" && countCharWinningMoves(boardState, char) > 0);\n  });\n}\n\ninterface Board {\n  lines: number[][];\n  countCharWinningMoves(boardState: string[], char: string): number;\n  doesCharWinLine(char: string, charArray: string[]): boolean;\n  doesCharWin(boardState: string[], char: string): boolean;\n  isWinner(boardState: string[], char: string): boolean;\n  hasChar(boardState: string[], char: string): boolean;\n  addMove(boardState: string[], char: string, index: number): string[]\n}\n\nconst board: Board = {\n  countCharWinningMoves: countCharWinningMoves,\n  doesCharWinLine: doesCharWinLine,\n  doesCharWin: doesCharWin,\n  isWinner: isWinner,\n  hasChar: hasChar,\n  addMove: addMove,\n  lines: lines,\n}\n\nexport default board;","import Board from './board';\n\nlet DEFS = {\n  computer: \"o\",\n  human: \"x\",\n}\n\nconst makeMove = (boardState, moveCount) => {\n  switch (moveCount) {\n\n    case 0: return 0;\n\n    case 1: {\n      if (boardState[4] !== \"\") { return 0; }\n      return 4;\n    }\n\n    case 2: {\n      if (boardState[1] !== \"\" || boardState[3] !== \"\") { return 4; }\n      if (boardState[8] !== \"\") { return 4; }\n      if (boardState[5] !== \"\") { return 2; }\n      if (boardState[7] !== \"\") { return 6; }\n      return 8;\n    }\n\n    case 9: {\n      return -1;\n    }\n\n    default: {\n      let winningMove = findFirstWinningMove(boardState);\n\n      if (winningMove !== undefined) {\n        return winningMove;\n      }\n\n      let winningShapeMove = findOptimalNonWinningMove(boardState);\n      if (winningShapeMove !== undefined) {\n        return winningShapeMove;\n      }\n\n      var moveOrderPriority = [4, 0, 2, 6, 8, 1, 3, 5, 7];\n      return moveOrderPriority.find(move => !boardState[move]) || -1;\n    }\n  }\n}\n\nconst findFirstWinningMove = (boardState) => {\n  let winningMove;\n\n  Board.lines.find(line => {\n    let charArray = line.map(index => boardState[index]);\n\n    if (Board.doesCharWinLine(DEFS.computer, charArray)) {\n      winningMove = line[charArray.indexOf(\"\")]\n      return true;\n    }\n    if (Board.doesCharWinLine(DEFS.human, charArray)) {\n      winningMove = line[charArray.indexOf(\"\")]\n    }\n\n    return false;\n  });\n\n  return winningMove;\n}\n\nconst findOptimalNonWinningMove = (boardState) => {\n  let shapeMove = boardState.findIndex((square, index) => {\n    let newBoardState = Board.addMove(boardState, DEFS.computer, index);\n\n    return (square === \"\" && Board.countCharWinningMoves(newBoardState, DEFS.computer) >= 2);\n  });\n\n  let attackMove = boardState.findIndex((square, index) => {\n    let newBoardState = Board.addMove(boardState, DEFS.computer, index);\n    let attackMove = findFirstWinningMove(newBoardState);\n    let newerBoardState = Board.addMove(newBoardState, DEFS.human, attackMove);\n\n    return (square === \"\" && attackMove !== undefined && Board.countCharWinningMoves(newerBoardState, DEFS.human) < 2);\n  });\n\n  return [shapeMove, attackMove].find(move => move !== -1);\n}\n\nconst AI = {\n  setDefs: defs => { DEFS = { ...defs } },\n  move: makeMove\n}\n\nexport default AI;","import Board from '../AI/board';\nimport AI from \"../AI/ai\";\n\nconst rand = Math.random();\nconst defs = {\n  human: rand > 0.5 ? \"x\" : \"o\",\n  computer: rand < 0.5 ? \"x\" : \"o\"\n};\n\nAI.setDefs(defs);\n\nconst genRandomID = length => {\n  var text = [];\n  var possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < length; i++)\n    text.push(possible.charAt(Math.floor(Math.random() * possible.length)));\n\n  return text.join(\"\");\n};\n\nconst initialState = {\n  matchId: genRandomID(20),\n  boardState: Array(9).fill(\"\"),\n  lastMove: { char: \"\", position: null },\n  nextAction: rand > 0.5 ? \"humanSelect\" : \"computer\",\n  moveHistory: [],\n  victory: \"\"\n};\n\nconst updateMoveHistory = (moveHistory, nextMove) => {\n  let newMoveHistory = moveHistory.length ? [...moveHistory, nextMove] : [nextMove];\n  return newMoveHistory;\n};\n\nconst checkVictory = boardState => {\n  if (Board.isWinner(boardState, defs.computer)) {\n    return \"computer\";\n  }\n\n  if (Board.isWinner(boardState, defs.human)) {\n    return \"human\";\n  }\n\n  if (!Board.hasChar(boardState, \"\")) {\n    return \"tie\";\n  }\n\n  return \"\";\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SELECT_SYMBOL\": {\n      defs.human = action.value.human;\n      defs.computer = action.value.computer;\n      AI.setDefs(defs);\n\n      return {\n        ...state,\n        nextAction: \"human\"\n      };\n    }\n    case \"HUMAN_MOVE\": {\n      if (!state.victory && state.nextAction === \"human\" && state.boardState[action.value] === \"\") {\n\n        let nextBoard = Board.addMove(state.boardState, defs.human, action.value);\n\n        return {\n          ...state,\n          boardState: nextBoard,\n          lastMove: { position: action.value, char: defs.human },\n          nextAction: \"computer\",\n          moveHistory: updateMoveHistory(state.moveHistory, action.value),\n          victory: checkVictory(nextBoard)\n        };\n      } else {\n        return state;\n      }\n    }\n    case \"COMPUTER_MOVE\": {\n      let computerMove = AI.move(state.boardState, state.moveHistory.length);\n\n      if (state.nextAction === \"computer\" && computerMove > -1) {\n        let nextBoard = Board.addMove(state.boardState, defs.computer, computerMove);\n\n        return {\n          ...state,\n          boardState: nextBoard,\n          nextAction: \"human\",\n          moveHistory: updateMoveHistory(state.moveHistory, computerMove),\n          victory: checkVictory(nextBoard),\n        }\n      } else {\n        return {\n          ...state,\n          nextAction: \"human\",\n          moveHistory: updateMoveHistory(state.moveHistory, -1)\n        }\n      }\n    }\n    case \"UNDO_LAST_MOVE\": {\n      if (state.lastMove.position !== null && state.nextAction === \"human\") {\n        let newBoardState = [...state.boardState];\n        let newMoveHistory = [...state.moveHistory];\n        let newLastMove = { ...state.lastMove };\n\n        newLastMove.position =\n          newMoveHistory.length >= 4\n            ? newMoveHistory[newMoveHistory.length - 4]\n            : null;\n        newBoardState[newMoveHistory.pop()] = \"\";\n        newBoardState[newMoveHistory.pop()] = \"\";\n\n        return {\n          ...state,\n          boardState: newBoardState,\n          lastMove: newLastMove,\n          moveHistory: newMoveHistory,\n          victory: \"\"\n        };\n      }\n      return state;\n    }\n    case \"RESTART\": {\n      return {\n        ...initialState,\n        matchId: genRandomID(20),\n        nextAction: Math.random() > 0.5 ? \"humanSelect\" : \"computer\"\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './Store/reducer';\n\nconst store = createStore( reducer );\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}